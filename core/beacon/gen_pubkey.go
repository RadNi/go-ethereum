// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package beacon

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*rsaPublicKeyMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r RSAPublicKey) MarshalJSON() ([]byte, error) {
	type RSAPublicKey struct {
		N hexutil.Bytes  `json:"n"     gencodec:"required"`
		E hexutil.Uint64 `json:"e"     gencodec:"required"`
	}
	var enc RSAPublicKey
	enc.N = r.N
	enc.E = hexutil.Uint64(r.E)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *RSAPublicKey) UnmarshalJSON(input []byte) error {
	type RSAPublicKey struct {
		N *hexutil.Bytes  `json:"n"     gencodec:"required"`
		E *hexutil.Uint64 `json:"e"     gencodec:"required"`
	}
	var dec RSAPublicKey
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.N == nil {
		return errors.New("missing required field 'n' for RSAPublicKey")
	}
	r.N = *dec.N
	if dec.E == nil {
		return errors.New("missing required field 'e' for RSAPublicKey")
	}
	r.E = uint64(*dec.E)
	return nil
}
