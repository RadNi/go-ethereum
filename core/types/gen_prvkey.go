// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*elgamalPrivateKeyMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e ElgamalPrivateKey) MarshalJSON() ([]byte, error) {
	type ElgamalPrivateKey struct {
		PublicKey *ElgamalPublicKey `json:"publicKey"     gencodec:"required"`
		X         hexutil.Bytes     `json:"x"             gencodec:"required"`
	}
	var enc ElgamalPrivateKey
	enc.PublicKey = e.PublicKey
	enc.X = e.X
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ElgamalPrivateKey) UnmarshalJSON(input []byte) error {
	type ElgamalPrivateKey struct {
		PublicKey *ElgamalPublicKey `json:"publicKey"     gencodec:"required"`
		X         *hexutil.Bytes    `json:"x"             gencodec:"required"`
	}
	var dec ElgamalPrivateKey
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.PublicKey == nil {
		return errors.New("missing required field 'publicKey' for ElgamalPrivateKey")
	}
	e.PublicKey = dec.PublicKey
	if dec.X == nil {
		return errors.New("missing required field 'x' for ElgamalPrivateKey")
	}
	e.X = *dec.X
	return nil
}
