// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*rsaPrivateKeyMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r RSAPrivateKey) MarshalJSON() ([]byte, error) {
	type RSAPrivateKey struct {
		PublicKey *RSAPublicKey   `json:"publicKey"     gencodec:"required"`
		D         hexutil.Bytes   `json:"d"             gencodec:"required"`
		Primes    []hexutil.Bytes `json:"primes"        gencodec:"required"`
	}
	var enc RSAPrivateKey
	enc.PublicKey = r.PublicKey
	enc.D = r.D
	if r.Primes != nil {
		enc.Primes = make([]hexutil.Bytes, len(r.Primes))
		for k, v := range r.Primes {
			enc.Primes[k] = v
		}
	}
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *RSAPrivateKey) UnmarshalJSON(input []byte) error {
	type RSAPrivateKey struct {
		PublicKey *RSAPublicKey   `json:"publicKey"     gencodec:"required"`
		D         *hexutil.Bytes  `json:"d"             gencodec:"required"`
		Primes    []hexutil.Bytes `json:"primes"        gencodec:"required"`
	}
	var dec RSAPrivateKey
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.PublicKey == nil {
		return errors.New("missing required field 'publicKey' for RSAPrivateKey")
	}
	r.PublicKey = dec.PublicKey
	if dec.D == nil {
		return errors.New("missing required field 'd' for RSAPrivateKey")
	}
	r.D = *dec.D
	if dec.Primes == nil {
		return errors.New("missing required field 'primes' for RSAPrivateKey")
	}
	r.Primes = make([][]byte, len(dec.Primes))
	for k, v := range dec.Primes {
		r.Primes[k] = v
	}
	return nil
}
